# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "ahci" "ohci_pci" "ehci_pci" "xhci_pci" "usb_storage" "usbhid" "sd_mod" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/sdc2";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/sdc1";
      fsType = "vfat";
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/9327091c-0396-4827-828b-18ba2ea751ed";
      fsType = "ext4";
    };

  fileSystems."/home/deadlock/Documents" =
    { device = "/dev/disk/by-uuid/ac4d798a-ce48-42f6-a3a2-c900ed6e107e";
      fsType = "ext4";
    };

  fileSystems."/home/deadlock/Pictures" =
    { device = "/dev/disk/by-uuid/c393ccce-816d-4fe4-99ae-9c687fcf6ad1";
      fsType = "ext4";
    };

  fileSystems."/media/Music" =
    { device = "/dev/disk/by-uuid/9fc3d607-92aa-41a3-a5c6-7939be3943da";
      fsType = "ext4";
    };

  fileSystems."/media/Games" =
    { device = "/dev/disk/by-uuid/4eb4e4df-b170-433e-a356-2446639e1ad7";
      fsType = "ext4";
    };

  fileSystems."/media/Videos" =
    { device = "/dev/disk/by-uuid/f2d23ba9-7dc6-4068-9be7-c8a831e391fa";
      fsType = "ext4";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/398aec73-2a8d-445b-a0a2-6050e3389d99"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;


  # nvidia config

# Enable OpenGL
  hardware.opengl = {
    enable = true;
    driSupport = true;
    driSupport32Bit = true;
  };

  # Load nvidia driver for Xorg and Wayland
  services.xserver.videoDrivers = ["nvidia"];


  hardware.nvidia = {

    # Modesetting is required.
    modesetting.enable = true;

    # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
    powerManagement.enable = true;
    # Fine-grained power management. Turns off GPU when not in use.
    # Experimental and only works on modern Nvidia GPUs (Turing or newer).
    powerManagement.finegrained = false;

    # Use the NVidia open source kernel module (not to be confused with the
    # independent third-party "nouveau" open source driver).
    # Support is limited to the Turing and later architectures. Full list of 
    # supported GPUs is at: 
    # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus 
    # Only available from driver 515.43.04+
    # Do not disable this unless your GPU is unsupported or if you have a good reason to.
    open = false;

    # Enable the Nvidia settings menu,
	# accessible via `nvidia-settings`.
    nvidiaSettings = true;

    # Optionally, you may need to select the appropriate driver version for your specific GPU.
    package = config.boot.kernelPackages.nvidiaPackages.stable;
  };
}
